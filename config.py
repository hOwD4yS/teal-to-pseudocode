from instructions import branch_insts, cmp_insts, memory_insts, tx_insts, types_insts, other_insts, arith_insts

OPCODES = {}

OPCODES["err"] = other_insts.ERR
OPCODES["sha256"] = "nop"
OPCODES["keccak256"] = "nop"
OPCODES["sha512_256"] = "nop"
OPCODES["sha256"] = "nop"
OPCODES["keccak256"] = "nop"
OPCODES["sha512_256"] = "nop"
OPCODES["ed25519verify"] = "nop"
OPCODES["ed25519verify"] = "nop"
OPCODES["ecdsa_verify"] = "nop"
OPCODES["ecdsa_pk_decompress"] = "nop"
OPCODES["ecdsa_pk_recover"] = "nop"
OPCODES["+"] = arith_insts.ADD
OPCODES["-"] = arith_insts.SUB
OPCODES["/"] = arith_insts.DIV
OPCODES["*"] = arith_insts.MUL
OPCODES["<"] = cmp_insts.LT
OPCODES[">"] = cmp_insts.GT
OPCODES["<="] = cmp_insts.LE
OPCODES[">="] = cmp_insts.GE
OPCODES["&&"] = cmp_insts.AND
OPCODES["||"] = cmp_insts.OR
OPCODES["=="] = cmp_insts.EQ
OPCODES["!="] = cmp_insts.NE
OPCODES["!"] = arith_insts.NOT
OPCODES["len"] = other_insts.LEN
OPCODES["itob"] = other_insts.ITOB
OPCODES["btoi"] = other_insts.BTOI
OPCODES["%"] = arith_insts.MOD
OPCODES["|"] = arith_insts.OR
OPCODES["&"] = arith_insts.AND
OPCODES["^"] = arith_insts.XOR
OPCODES["~"] = arith_insts.INVERT
OPCODES["mulw"] = arith_insts.MULW
OPCODES["addw"] = "nop"
OPCODES["divmodw"] = arith_insts.DIVMODW
OPCODES["intcblock"] = types_insts.INTCBLOCK
OPCODES["intc"] = types_insts.INTC
OPCODES["int"] = types_insts.INT
OPCODES["addr"] = types_insts.ADDR
OPCODES["byte"] = types_insts.BYTE

OPCODES["bytecblock"] = types_insts.BYTECBLOCK
OPCODES["bytec"] = types_insts.BYTEC
OPCODES["arg"] = "nop"
OPCODES["txn"] = tx_insts.TXN
OPCODES["global"] = tx_insts.GLOBAL
OPCODES["gtxn"] = tx_insts.GTXN
OPCODES["load"] = memory_insts.LOAD
OPCODES["store"] = memory_insts.STORE
OPCODES["txna"] = tx_insts.TXNA
OPCODES["gtxna"] = tx_insts.GTXNA
OPCODES["gtxns"] = tx_insts.GTXNS
OPCODES["gtxnsa"] = tx_insts.GTXNSA
OPCODES["gload"] = "nop"
OPCODES["gloads"] = "nop"
OPCODES["gaid"] = "nop"
OPCODES["gaids"] = "nop"
OPCODES["loads"] = "nop"
OPCODES["stores"] = "nop"
OPCODES["bnz"] = branch_insts.BNZ
OPCODES["bz"] = branch_insts.BZ
OPCODES["b"] = branch_insts.B
OPCODES["return"] = branch_insts.RETURN
OPCODES["assert"] = other_insts.ASSERT
OPCODES["bury"] = "nop"
OPCODES["popn"] = "nop"
OPCODES["dupn"] = "nop"
OPCODES["pop"] = other_insts.POP
OPCODES["dup"] = other_insts.DUP
OPCODES["dup2"] = other_insts.DUP2
OPCODES["dig"] = "nop"
OPCODES["swap"] = other_insts.SWAP
OPCODES["select"] = other_insts.SELECT
OPCODES["cover"] = "nop"
OPCODES["uncover"] = "nop"
OPCODES["concat"] = other_insts.CONCAT
OPCODES["substring"] = other_insts.SUBSTRING
OPCODES["substring3"] = other_insts.SUBSTRING3
OPCODES["getbit"] = types_insts.GETBIT
OPCODES["setbit"] = types_insts.SETBIT
OPCODES["getbyte"] = types_insts.GETBYTE
OPCODES["setbyte"] = types_insts.SETBYTE
OPCODES["extract"] = types_insts.EXTRACT
OPCODES["extract3"] = types_insts.EXTRACT3
OPCODES["extract_uint16"] = types_insts.EXTRACT_UINT16
OPCODES["extract_uint32"] = types_insts.EXTRACT_UINT32
OPCODES["extract_uint64"] = types_insts.EXTRACT_UINT64
OPCODES["replace2"] = types_insts.REPLACE2
OPCODES["replace3"] = types_insts.REPLACE3
OPCODES["base64_decode"] = "nop"
OPCODES["json_ref"] = "nop"
OPCODES["balance"] = other_insts.BALANCE
OPCODES["app_opted_in"] = "nop"
OPCODES["app_local_get"] = memory_insts.APP_LOCAL_GET
OPCODES["app_local_get_ex"] = memory_insts.APP_LOCAL_GET_EX
OPCODES["app_global_get"] = memory_insts.APP_GLOBAL_GET
OPCODES["app_global_get_ex"] = memory_insts.APP_GLOBAL_GET_EX
OPCODES["app_local_put"] = memory_insts.APP_LOCAL_PUT
OPCODES["app_global_put"] = memory_insts.APP_GLOBAL_PUT
OPCODES["app_local_del"] = memory_insts.APP_LOCAL_DEL
OPCODES["app_global_del"] = memory_insts.APP_GLOBAL_DEL
OPCODES["asset_holding_get"] = memory_insts.ASSET_HOLDING_GET
OPCODES["asset_params_get"] = memory_insts.ASSET_PARAMS_GET
OPCODES["app_params_get"] = memory_insts.APP_PARAMS_GET
OPCODES["acct_params_get"] = "nop"
OPCODES["min_balance"] = other_insts.MIN_BALANCE
OPCODES["pushbytes"] = types_insts.PUSHBYTES
OPCODES["pushint"] = types_insts.PUSHINT
OPCODES["pushbytess"] = "nop"
OPCODES["pushints"] = "nop"
OPCODES["ed25519verify_bare"] = "nop"
OPCODES["callsub"] = branch_insts.CALLSUB
OPCODES["retsub"] = branch_insts.RETSUB
OPCODES["proto"] = "nop"
OPCODES["frame_dig"] = "nop"
OPCODES["frame_bury"] = "nop"
OPCODES["switch"] = "nop"
OPCODES["match"] = "nop"
OPCODES["shl"] = arith_insts.SHL
OPCODES["shr"] = arith_insts.SHR
OPCODES["sqrt"] = arith_insts.SQRT
OPCODES["bitlen"] = "nop"
OPCODES["exp"] = arith_insts.EXP
OPCODES["expw"] = "nop"
OPCODES["bsqrt"] = arith_insts.BSQRT
OPCODES["divw"] = arith_insts.DIVW
OPCODES["sha3_256"] = "nop"
OPCODES["bn256_add"] = "nop"
OPCODES["bn256_scalar_mul"] = "nop"
OPCODES["bn256_pairing"] = "nop"
OPCODES["b+"] = arith_insts.BADD
OPCODES["b-"] = arith_insts.BSUB
OPCODES["b/"] = arith_insts.DIV
OPCODES["b*"] = arith_insts.MOD
OPCODES["b<"] = cmp_insts.BLT
OPCODES["b>"] = cmp_insts.BGT
OPCODES["b<="] = cmp_insts.BLE
OPCODES["b>="] = cmp_insts.BGE
OPCODES["b=="] = cmp_insts.BEQ
OPCODES["b!="] = cmp_insts.BNE
OPCODES["b%"] = arith_insts.BMOD
OPCODES["b|"] = arith_insts.BOR
OPCODES["b&"] = arith_insts.BAND
OPCODES["b^"] = arith_insts.BXOR
OPCODES["b~"] = arith_insts.BINVERT
OPCODES["bzero"] = arith_insts.BZERO
OPCODES["log"] = other_insts.LOG
OPCODES["itxn_begin"] = tx_insts.ITXN_BEGIN
OPCODES["itxn_field"] = tx_insts.ITXN_FIELD
OPCODES["itxn_submit"] = tx_insts.ITXN_SUBMIT
OPCODES["itxn"] = tx_insts.ITXN
OPCODES["itxna"] = "nop"
OPCODES["itxn_next"] = "nop"
OPCODES["gitxn"] = "nop"
OPCODES["gitxna"] = "nop"
OPCODES["box_create"] = "nop"
OPCODES["box_extract"] = "nop"
OPCODES["box_replace"] = "nop"
OPCODES["box_del"] = "nop"
OPCODES["box_len"] = "nop"
OPCODES["box_get"] = "nop"
OPCODES["box_put"] = "nop"
OPCODES["txnas"] = tx_insts.TXNAS
OPCODES["gtxnas"] = "nop"
OPCODES["gtxnsas"] = "nop"
OPCODES["args"] = "nop"
OPCODES["gloadss"] = "nop"
OPCODES["itxnas"] = "nop"
OPCODES["gitxnas"] = "nop"
OPCODES["vrf_verify"] = "nop"
OPCODES["block"] = "nop"
